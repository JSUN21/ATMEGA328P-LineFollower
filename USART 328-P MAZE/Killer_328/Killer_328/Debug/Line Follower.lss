
Line Follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000081a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd7  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000395  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000724  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d6  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c7  00000000  00000000  000024a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>


int main(void)
{
	init_ports();
  90:	0e 94 b7 00 	call	0x16e	; 0x16e <init_ports>
	init_timer1();
  94:	0e 94 51 00 	call	0xa2	; 0xa2 <init_timer1>
		Init_USART(207); //De la tabla 19.12, pag.203 (atmega328 datasheet)
  98:	8f ec       	ldi	r24, 0xCF	; 207
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 1f 02 	call	0x43e	; 0x43e <Init_USART>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x10>

000000a2 <init_timer1>:
*
*****************************************************************/

void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit (pag.97 tabla 39)
  a2:	e0 e8       	ldi	r30, 0x80	; 128
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);//Envía nivel bajo por OC1A/OC1B on Compare Match(Pag.96 tabla 36)
  ac:	80 81       	ld	r24, Z
  ae:	80 6a       	ori	r24, 0xA0	; 160
  b0:	80 83       	st	Z, r24
	//when up-counting. Envía nivel alto por OC1A/OC1B on Compare
	//Match when downcounting.
	//Ver figura 40 en página 93

	TCCR1B |= (1<<CS12)|(1<<CS10); //frecuencia=fcpu/64 ~ 15Khz (frecuencia para los motores)
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <motor_right>:
*****************************************************************/



void motor_right(uint8_t dir,uint8_t speed)
{
  be:	cf 93       	push	r28
	//Dirección
	if(dir == MOTOR_STOP)
  c0:	81 11       	cpse	r24, r1
  c2:	03 c0       	rjmp	.+6      	; 0xca <motor_right+0xc>
	{
		PORTB &= (~(1<<PB0));
  c4:	28 98       	cbi	0x05, 0	; 5
		PORTB &= (~(1<<PB4));
  c6:	2c 98       	cbi	0x05, 4	; 5
  c8:	09 c0       	rjmp	.+18     	; 0xdc <motor_right+0x1e>
	}

	else if(dir == MOTOR_BACKWARD)
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	19 f4       	brne	.+6      	; 0xd4 <motor_right+0x16>
	{
		PORTB &= (~(1<<PB0));
  ce:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PB4);
  d0:	2c 9a       	sbi	0x05, 4	; 5
  d2:	04 c0       	rjmp	.+8      	; 0xdc <motor_right+0x1e>
	}
	else if(dir == MOTOR_FORWARD)
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	11 f4       	brne	.+4      	; 0xdc <motor_right+0x1e>
	{
		PORTB &= (~(1<<PB4));
  d8:	2c 98       	cbi	0x05, 4	; 5
		PORTB |= (1<<PB0);
  da:	28 9a       	sbi	0x05, 0	; 5
	}

	//Velocidad
	uint8_t sreg = SREG;//Status Register
  dc:	cf b7       	in	r28, 0x3f	; 63

	cli();
  de:	f8 94       	cli

	OCR1A = (uint8_t)(((float)speed/255.0)*ROBO_SPEED);
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	4f e7       	ldi	r20, 0x7F	; 127
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	0e 94 35 02 	call	0x46a	; 0x46a <__divsf3>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	46 e1       	ldi	r20, 0x16	; 22
  fc:	53 e4       	ldi	r21, 0x43	; 67
  fe:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 102:	0e 94 a7 02 	call	0x54e	; 0x54e <__fixunssfsi>
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	SREG = sreg;
 110:	cf bf       	out	0x3f, r28	; 63
}
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <motor_left>:
* speed = cualquier valor de 0 a 255
* Ejemplo:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_left(uint8_t dir,uint8_t speed)
{
 116:	cf 93       	push	r28
	//Dirección
	if(dir == MOTOR_STOP)
 118:	81 11       	cpse	r24, r1
 11a:	03 c0       	rjmp	.+6      	; 0x122 <motor_left+0xc>
	{
		PORTC &= (~(1<<PC0));
 11c:	40 98       	cbi	0x08, 0	; 8
		PORTC &= (~(1<<PC1));
 11e:	41 98       	cbi	0x08, 1	; 8
 120:	09 c0       	rjmp	.+18     	; 0x134 <motor_left+0x1e>
	}

	else if(dir == MOTOR_FORWARD)
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	19 f4       	brne	.+6      	; 0x12c <motor_left+0x16>
	{
		PORTC &= (~(1<<PC1));
 126:	41 98       	cbi	0x08, 1	; 8
		PORTC |= (1<<PC0);
 128:	40 9a       	sbi	0x08, 0	; 8
 12a:	04 c0       	rjmp	.+8      	; 0x134 <motor_left+0x1e>
	}
	else if(dir == MOTOR_BACKWARD)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	11 f4       	brne	.+4      	; 0x134 <motor_left+0x1e>
	{
		PORTC &= (~(1<<PC0));
 130:	40 98       	cbi	0x08, 0	; 8
		PORTC |= (1<<PC1);
 132:	41 9a       	sbi	0x08, 1	; 8
	}

	//Velocidad
	uint8_t sreg = SREG;
 134:	cf b7       	in	r28, 0x3f	; 63

	cli();
 136:	f8 94       	cli

	OCR1B = (uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__floatunsisf>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	4f e7       	ldi	r20, 0x7F	; 127
 148:	53 e4       	ldi	r21, 0x43	; 67
 14a:	0e 94 35 02 	call	0x46a	; 0x46a <__divsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	46 e1       	ldi	r20, 0x16	; 22
 154:	53 e4       	ldi	r21, 0x43	; 67
 156:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__mulsf3>
 15a:	0e 94 a7 02 	call	0x54e	; 0x54e <__fixunssfsi>
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 164:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	SREG = sreg;
 168:	cf bf       	out	0x3f, r28	; 63
}
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <init_ports>:
	* PC0		IN3	 |--> LEFT MOTOR
	* PC1		IN4 -
	* --------------
	*/
	//Salidas para PWM
	DDRB |= (1<<PB1); //OC1A Control de velocidad para motor Derecho
 16e:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<PB2); //OC1B Control de velocidad para motor izquierdo 
 170:	22 9a       	sbi	0x04, 2	; 4
	
	//Salidas para dirección
	DDRB |= (1 << PB0); //Control de avance motor derecho
 172:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << PB4); //Control de reversa motor derecho
 174:	24 9a       	sbi	0x04, 4	; 4
	DDRC |= (1 << PC0); //Control de avanza motor izquierdo
 176:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1 << PC1); //Control de reversa motor izquierdo
 178:	39 9a       	sbi	0x07, 1	; 7
	
	//Entradas sensor IR
	
	DDRD &= ~(1 << PD2);
 17a:	52 98       	cbi	0x0a, 2	; 10
	DDRD &= ~(1 << PD3);
 17c:	53 98       	cbi	0x0a, 3	; 10
	DDRD &= ~(1 << PD4);
 17e:	54 98       	cbi	0x0a, 4	; 10
	DDRD &= ~(1 << PD5);
 180:	55 98       	cbi	0x0a, 5	; 10

		
	/*****************************************************************
	* Definición de puertos hacia LEDs
	*******************************************************************/										
	DDRB |= 1 << PB5; //PB5 
 182:	25 9a       	sbi	0x04, 5	; 4
 184:	08 95       	ret

00000186 <motor_turnr>:

void motor_turnr(void){
	
	// ejemplo del argumento motor_right (comando adelante o atras o se detiene ,  velocidad)
	
	motor_right(MOTOR_BACKWARD,255);
 186:	6f ef       	ldi	r22, 0xFF	; 255
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 5f 00 	call	0xbe	; 0xbe <motor_right>
	motor_left(MOTOR_FORWARD,200);
 18e:	68 ec       	ldi	r22, 0xC8	; 200
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 8b 00 	call	0x116	; 0x116 <motor_left>
 196:	08 95       	ret

00000198 <motor_turnl>:
	
	}
	
	void motor_turnl(void){
		
	motor_right(MOTOR_BACKWARD,200);
 198:	68 ec       	ldi	r22, 0xC8	; 200
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 5f 00 	call	0xbe	; 0xbe <motor_right>
	motor_left(MOTOR_FORWARD,255); 
 1a0:	6f ef       	ldi	r22, 0xFF	; 255
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 8b 00 	call	0x116	; 0x116 <motor_left>
 1a8:	08 95       	ret

000001aa <motor_f>:
		
	}
	
	void motor_f(void){
		
		motor_right(MOTOR_FORWARD,255);
 1aa:	6f ef       	ldi	r22, 0xFF	; 255
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 5f 00 	call	0xbe	; 0xbe <motor_right>
		motor_left(MOTOR_FORWARD,255);
 1b2:	6f ef       	ldi	r22, 0xFF	; 255
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 8b 00 	call	0x116	; 0x116 <motor_left>
 1ba:	08 95       	ret

000001bc <motor_b>:
		
	}

    void motor_b(void){
	
	motor_right(MOTOR_BACKWARD,200);
 1bc:	68 ec       	ldi	r22, 0xC8	; 200
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 5f 00 	call	0xbe	; 0xbe <motor_right>
	motor_left(MOTOR_BACKWARD,200);
 1c4:	68 ec       	ldi	r22, 0xC8	; 200
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 8b 00 	call	0x116	; 0x116 <motor_left>
 1cc:	08 95       	ret

000001ce <motor_s>:
    }
	
    void motor_s(void){
	
	motor_right(MOTOR_STOP,1);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 5f 00 	call	0xbe	; 0xbe <motor_right>
	motor_left(MOTOR_STOP,1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 8b 00 	call	0x116	; 0x116 <motor_left>
 1de:	08 95       	ret

000001e0 <__vector_18>:
  while (i < 64)
  {
	  if (s[i] == '\0') break;
	  USART_transmit(s[i++]);
  }
}
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 20e:	81 34       	cpi	r24, 0x41	; 65
 210:	19 f4       	brne	.+6      	; 0x218 <__vector_18+0x38>
 212:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_f>
 216:	02 c1       	rjmp	.+516    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 21c:	83 35       	cpi	r24, 0x53	; 83
 21e:	19 f4       	brne	.+6      	; 0x226 <__vector_18+0x46>
 220:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_b>
 224:	fb c0       	rjmp	.+502    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 22a:	84 34       	cpi	r24, 0x44	; 68
 22c:	71 f4       	brne	.+28     	; 0x24a <__vector_18+0x6a>
 22e:	0e 94 cc 00 	call	0x198	; 0x198 <motor_turnl>
 232:	2f e7       	ldi	r18, 0x7F	; 127
 234:	44 e5       	ldi	r20, 0x54	; 84
 236:	5d e0       	ldi	r21, 0x0D	; 13
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	40 40       	sbci	r20, 0x00	; 0
 23c:	50 40       	sbci	r21, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <__vector_18+0x58>
 240:	00 c0       	rjmp	.+0      	; 0x242 <__vector_18+0x62>
 242:	00 00       	nop
 244:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 248:	e9 c0       	rjmp	.+466    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 24e:	86 34       	cpi	r24, 0x46	; 70
 250:	71 f4       	brne	.+28     	; 0x26e <__vector_18+0x8e>
 252:	0e 94 c3 00 	call	0x186	; 0x186 <motor_turnr>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9b ea       	ldi	r25, 0xAB	; 171
 25a:	2d e0       	ldi	r18, 0x0D	; 13
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	20 40       	sbci	r18, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <__vector_18+0x7c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <__vector_18+0x86>
 266:	00 00       	nop
 268:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 26c:	d7 c0       	rjmp	.+430    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 272:	87 34       	cpi	r24, 0x47	; 71
 274:	19 f4       	brne	.+6      	; 0x27c <__vector_18+0x9c>
 276:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 27a:	d0 c0       	rjmp	.+416    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 27c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 280:	88 34       	cpi	r24, 0x48	; 72
 282:	71 f4       	brne	.+28     	; 0x2a0 <__vector_18+0xc0>
 284:	0e 94 c3 00 	call	0x186	; 0x186 <motor_turnr>
 288:	4f e7       	ldi	r20, 0x7F	; 127
 28a:	57 e9       	ldi	r21, 0x97	; 151
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	41 50       	subi	r20, 0x01	; 1
 290:	50 40       	sbci	r21, 0x00	; 0
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <__vector_18+0xae>
 296:	00 c0       	rjmp	.+0      	; 0x298 <__vector_18+0xb8>
 298:	00 00       	nop
 29a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 29e:	be c0       	rjmp	.+380    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 2a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a4:	82 34       	cpi	r24, 0x42	; 66
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <__vector_18+0xe4>
 2a8:	0e 94 cc 00 	call	0x198	; 0x198 <motor_turnl>
 2ac:	9f e7       	ldi	r25, 0x7F	; 127
 2ae:	27 e9       	ldi	r18, 0x97	; 151
 2b0:	46 e0       	ldi	r20, 0x06	; 6
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	20 40       	sbci	r18, 0x00	; 0
 2b6:	40 40       	sbci	r20, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <__vector_18+0xd2>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__vector_18+0xdc>
 2bc:	00 00       	nop
 2be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 2c2:	ac c0       	rjmp	.+344    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c8:	83 34       	cpi	r24, 0x43	; 67
 2ca:	19 f4       	brne	.+6      	; 0x2d2 <__vector_18+0xf2>
 2cc:	0e 94 c3 00 	call	0x186	; 0x186 <motor_turnr>
 2d0:	a5 c0       	rjmp	.+330    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d6:	85 34       	cpi	r24, 0x45	; 69
 2d8:	c9 f4       	brne	.+50     	; 0x30c <__vector_18+0x12c>
 2da:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_f>
 2de:	5f ef       	ldi	r21, 0xFF	; 255
 2e0:	87 e5       	ldi	r24, 0x57	; 87
 2e2:	9b e1       	ldi	r25, 0x1B	; 27
 2e4:	51 50       	subi	r21, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <__vector_18+0x104>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <__vector_18+0x10e>
 2ee:	00 00       	nop
 2f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_b>
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	41 e5       	ldi	r20, 0x51	; 81
 2f8:	5c e1       	ldi	r21, 0x1C	; 28
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	40 40       	sbci	r20, 0x00	; 0
 2fe:	50 40       	sbci	r21, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <__vector_18+0x11a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <__vector_18+0x124>
 304:	00 00       	nop
 306:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 30a:	88 c0       	rjmp	.+272    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 310:	89 34       	cpi	r24, 0x49	; 73
 312:	99 f4       	brne	.+38     	; 0x33a <__vector_18+0x15a>
 314:	26 e0       	ldi	r18, 0x06	; 6
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	98 e0       	ldi	r25, 0x08	; 8
 31a:	85 b1       	in	r24, 0x05	; 5
 31c:	89 27       	eor	r24, r25
 31e:	85 b9       	out	0x05, r24	; 5
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	41 ee       	ldi	r20, 0xE1	; 225
 324:	54 e0       	ldi	r21, 0x04	; 4
 326:	81 50       	subi	r24, 0x01	; 1
 328:	40 40       	sbci	r20, 0x00	; 0
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <__vector_18+0x146>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <__vector_18+0x150>
 330:	00 00       	nop
 332:	21 50       	subi	r18, 0x01	; 1
 334:	31 09       	sbc	r19, r1
 336:	89 f7       	brne	.-30     	; 0x31a <__vector_18+0x13a>
 338:	71 c0       	rjmp	.+226    	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33e:	81 36       	cpi	r24, 0x61	; 97
 340:	09 f0       	breq	.+2      	; 0x344 <__vector_18+0x164>
 342:	45 c0       	rjmp	.+138    	; 0x3ce <__vector_18+0x1ee>
 344:	0e 94 cc 00 	call	0x198	; 0x198 <motor_turnl>
 348:	8f e7       	ldi	r24, 0x7F	; 127
 34a:	97 e9       	ldi	r25, 0x97	; 151
 34c:	26 e0       	ldi	r18, 0x06	; 6
 34e:	81 50       	subi	r24, 0x01	; 1
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	20 40       	sbci	r18, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <__vector_18+0x16e>
 356:	00 c0       	rjmp	.+0      	; 0x358 <__vector_18+0x178>
 358:	00 00       	nop
 35a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_f>
 35e:	4f ef       	ldi	r20, 0xFF	; 255
 360:	57 e5       	ldi	r21, 0x57	; 87
 362:	8b e1       	ldi	r24, 0x1B	; 27
 364:	41 50       	subi	r20, 0x01	; 1
 366:	50 40       	sbci	r21, 0x00	; 0
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <__vector_18+0x184>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <__vector_18+0x18e>
 36e:	00 00       	nop
 370:	0e 94 c3 00 	call	0x186	; 0x186 <motor_turnr>
 374:	9f ef       	ldi	r25, 0xFF	; 255
 376:	2b ea       	ldi	r18, 0xAB	; 171
 378:	4d e0       	ldi	r20, 0x0D	; 13
 37a:	91 50       	subi	r25, 0x01	; 1
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	40 40       	sbci	r20, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <__vector_18+0x19a>
 382:	00 c0       	rjmp	.+0      	; 0x384 <__vector_18+0x1a4>
 384:	00 00       	nop
 386:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_f>
 38a:	5f ef       	ldi	r21, 0xFF	; 255
 38c:	8b ea       	ldi	r24, 0xAB	; 171
 38e:	9d e0       	ldi	r25, 0x0D	; 13
 390:	51 50       	subi	r21, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <__vector_18+0x1b0>
 398:	00 c0       	rjmp	.+0      	; 0x39a <__vector_18+0x1ba>
 39a:	00 00       	nop
 39c:	0e 94 c3 00 	call	0x186	; 0x186 <motor_turnr>
 3a0:	2f ef       	ldi	r18, 0xFF	; 255
 3a2:	4b ea       	ldi	r20, 0xAB	; 171
 3a4:	5d e0       	ldi	r21, 0x0D	; 13
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	40 40       	sbci	r20, 0x00	; 0
 3aa:	50 40       	sbci	r21, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <__vector_18+0x1c6>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <__vector_18+0x1d0>
 3b0:	00 00       	nop
 3b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_f>
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	9b ea       	ldi	r25, 0xAB	; 171
 3ba:	2d e0       	ldi	r18, 0x0D	; 13
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	20 40       	sbci	r18, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <__vector_18+0x1dc>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <__vector_18+0x1e6>
 3c6:	00 00       	nop
 3c8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 3cc:	27 c0       	rjmp	.+78     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3d2:	82 36       	cpi	r24, 0x62	; 98
 3d4:	19 f5       	brne	.+70     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3d6:	0e 94 cc 00 	call	0x198	; 0x198 <motor_turnl>
 3da:	4f e7       	ldi	r20, 0x7F	; 127
 3dc:	57 e9       	ldi	r21, 0x97	; 151
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	41 50       	subi	r20, 0x01	; 1
 3e2:	50 40       	sbci	r21, 0x00	; 0
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <__vector_18+0x200>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <__vector_18+0x20a>
 3ea:	00 00       	nop
 3ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <motor_f>
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	27 e8       	ldi	r18, 0x87	; 135
 3f4:	43 e1       	ldi	r20, 0x13	; 19
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	20 40       	sbci	r18, 0x00	; 0
 3fa:	40 40       	sbci	r20, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <__vector_18+0x216>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__FUSE_REGION_LENGTH__>
 400:	00 00       	nop
 402:	0e 94 c3 00 	call	0x186	; 0x186 <motor_turnr>
 406:	5f ef       	ldi	r21, 0xFF	; 255
 408:	82 e5       	ldi	r24, 0x52	; 82
 40a:	97 e0       	ldi	r25, 0x07	; 7
 40c:	51 50       	subi	r21, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_s>
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <Init_USART>:
*
*******************************************************************************/
void Init_USART(unsigned int baudrate)
{
	//Escoge modo asÃ­ncrono: UMSEL01=0 & UMSEL00=0 (tabla 19.4 pag.197
	UCSR0C &= (0<<UMSEL00) & (0<<UMSEL01); 
 43e:	e2 ec       	ldi	r30, 0xC2	; 194
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	20 81       	ld	r18, Z
 444:	10 82       	st	Z, r1
	
	//Selecciona la velocidad: U2X0=0 normal, U2X0=1 doble
	UCSR0A = (1<<U2X0); // bit U2X0 = 1 doble
 446:	22 e0       	ldi	r18, 0x02	; 2
 448:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	//Baudrate ejemplo: fosc = 16 Mhz, U2X0= 1, BaudRate = 9600, entonces UBRR0= 207
	//Ver DataSheet pag.153
	UBRR0H = (unsigned char) (baudrate>>8); // Escribe (MSB) en la parte alta del registro
 44c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) (baudrate); //Escribe (LSB) el valor en la parte baja
 450:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//TamaÃ±o de los datos
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); //8 bits (tabla 19.7 pag.198)
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	80 83       	st	Z, r24
	
	//Habilitar el transmisor y receptor
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 458:	e1 ec       	ldi	r30, 0xC1	; 193
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	88 e1       	ldi	r24, 0x18	; 24
 45e:	80 83       	st	Z, r24
		
	//Habilita bits de paro (tabla 19.6 pag.198)
	//UCSR0C = (1<<USBS0);
	
	sei(); //Activa interrupciones generales
 460:	78 94       	sei
	
	//Para activar/desactivar las interrupcines, sÃ³lo quitar/poner el sÃ­mbolo de comentarios
	UCSR0B |= (1<<RXCIE0);	//Activa interrupciones de "recepciÃ³n completada" (RXCIE0=1)
 462:	80 81       	ld	r24, Z
 464:	80 68       	ori	r24, 0x80	; 128
 466:	80 83       	st	Z, r24
 468:	08 95       	ret

0000046a <__divsf3>:
 46a:	0e 94 49 02 	call	0x492	; 0x492 <__divsf3x>
 46e:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_round>
 472:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscB>
 476:	58 f0       	brcs	.+22     	; 0x48e <__divsf3+0x24>
 478:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscA>
 47c:	40 f0       	brcs	.+16     	; 0x48e <__divsf3+0x24>
 47e:	29 f4       	brne	.+10     	; 0x48a <__divsf3+0x20>
 480:	5f 3f       	cpi	r21, 0xFF	; 255
 482:	29 f0       	breq	.+10     	; 0x48e <__divsf3+0x24>
 484:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
 488:	51 11       	cpse	r21, r1
 48a:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>
 48e:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_nan>

00000492 <__divsf3x>:
 492:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_split3>
 496:	68 f3       	brcs	.-38     	; 0x472 <__divsf3+0x8>

00000498 <__divsf3_pse>:
 498:	99 23       	and	r25, r25
 49a:	b1 f3       	breq	.-20     	; 0x488 <__divsf3+0x1e>
 49c:	55 23       	and	r21, r21
 49e:	91 f3       	breq	.-28     	; 0x484 <__divsf3+0x1a>
 4a0:	95 1b       	sub	r25, r21
 4a2:	55 0b       	sbc	r21, r21
 4a4:	bb 27       	eor	r27, r27
 4a6:	aa 27       	eor	r26, r26
 4a8:	62 17       	cp	r22, r18
 4aa:	73 07       	cpc	r23, r19
 4ac:	84 07       	cpc	r24, r20
 4ae:	38 f0       	brcs	.+14     	; 0x4be <__divsf3_pse+0x26>
 4b0:	9f 5f       	subi	r25, 0xFF	; 255
 4b2:	5f 4f       	sbci	r21, 0xFF	; 255
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	44 1f       	adc	r20, r20
 4ba:	aa 1f       	adc	r26, r26
 4bc:	a9 f3       	breq	.-22     	; 0x4a8 <__divsf3_pse+0x10>
 4be:	35 d0       	rcall	.+106    	; 0x52a <__divsf3_pse+0x92>
 4c0:	0e 2e       	mov	r0, r30
 4c2:	3a f0       	brmi	.+14     	; 0x4d2 <__divsf3_pse+0x3a>
 4c4:	e0 e8       	ldi	r30, 0x80	; 128
 4c6:	32 d0       	rcall	.+100    	; 0x52c <__divsf3_pse+0x94>
 4c8:	91 50       	subi	r25, 0x01	; 1
 4ca:	50 40       	sbci	r21, 0x00	; 0
 4cc:	e6 95       	lsr	r30
 4ce:	00 1c       	adc	r0, r0
 4d0:	ca f7       	brpl	.-14     	; 0x4c4 <__divsf3_pse+0x2c>
 4d2:	2b d0       	rcall	.+86     	; 0x52a <__divsf3_pse+0x92>
 4d4:	fe 2f       	mov	r31, r30
 4d6:	29 d0       	rcall	.+82     	; 0x52a <__divsf3_pse+0x92>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	bb 1f       	adc	r27, r27
 4e0:	26 17       	cp	r18, r22
 4e2:	37 07       	cpc	r19, r23
 4e4:	48 07       	cpc	r20, r24
 4e6:	ab 07       	cpc	r26, r27
 4e8:	b0 e8       	ldi	r27, 0x80	; 128
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__divsf3_pse+0x56>
 4ec:	bb 0b       	sbc	r27, r27
 4ee:	80 2d       	mov	r24, r0
 4f0:	bf 01       	movw	r22, r30
 4f2:	ff 27       	eor	r31, r31
 4f4:	93 58       	subi	r25, 0x83	; 131
 4f6:	5f 4f       	sbci	r21, 0xFF	; 255
 4f8:	3a f0       	brmi	.+14     	; 0x508 <__divsf3_pse+0x70>
 4fa:	9e 3f       	cpi	r25, 0xFE	; 254
 4fc:	51 05       	cpc	r21, r1
 4fe:	78 f0       	brcs	.+30     	; 0x51e <__divsf3_pse+0x86>
 500:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
 504:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	e4 f3       	brlt	.-8      	; 0x504 <__divsf3_pse+0x6c>
 50c:	98 3e       	cpi	r25, 0xE8	; 232
 50e:	d4 f3       	brlt	.-12     	; 0x504 <__divsf3_pse+0x6c>
 510:	86 95       	lsr	r24
 512:	77 95       	ror	r23
 514:	67 95       	ror	r22
 516:	b7 95       	ror	r27
 518:	f7 95       	ror	r31
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	c9 f7       	brne	.-14     	; 0x510 <__divsf3_pse+0x78>
 51e:	88 0f       	add	r24, r24
 520:	91 1d       	adc	r25, r1
 522:	96 95       	lsr	r25
 524:	87 95       	ror	r24
 526:	97 f9       	bld	r25, 7
 528:	08 95       	ret
 52a:	e1 e0       	ldi	r30, 0x01	; 1
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	bb 1f       	adc	r27, r27
 534:	62 17       	cp	r22, r18
 536:	73 07       	cpc	r23, r19
 538:	84 07       	cpc	r24, r20
 53a:	ba 07       	cpc	r27, r26
 53c:	20 f0       	brcs	.+8      	; 0x546 <__divsf3_pse+0xae>
 53e:	62 1b       	sub	r22, r18
 540:	73 0b       	sbc	r23, r19
 542:	84 0b       	sbc	r24, r20
 544:	ba 0b       	sbc	r27, r26
 546:	ee 1f       	adc	r30, r30
 548:	88 f7       	brcc	.-30     	; 0x52c <__divsf3_pse+0x94>
 54a:	e0 95       	com	r30
 54c:	08 95       	ret

0000054e <__fixunssfsi>:
 54e:	0e 94 43 03 	call	0x686	; 0x686 <__fp_splitA>
 552:	88 f0       	brcs	.+34     	; 0x576 <__fixunssfsi+0x28>
 554:	9f 57       	subi	r25, 0x7F	; 127
 556:	98 f0       	brcs	.+38     	; 0x57e <__fixunssfsi+0x30>
 558:	b9 2f       	mov	r27, r25
 55a:	99 27       	eor	r25, r25
 55c:	b7 51       	subi	r27, 0x17	; 23
 55e:	b0 f0       	brcs	.+44     	; 0x58c <__fixunssfsi+0x3e>
 560:	e1 f0       	breq	.+56     	; 0x59a <__fixunssfsi+0x4c>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	1a f0       	brmi	.+6      	; 0x572 <__fixunssfsi+0x24>
 56c:	ba 95       	dec	r27
 56e:	c9 f7       	brne	.-14     	; 0x562 <__fixunssfsi+0x14>
 570:	14 c0       	rjmp	.+40     	; 0x59a <__fixunssfsi+0x4c>
 572:	b1 30       	cpi	r27, 0x01	; 1
 574:	91 f0       	breq	.+36     	; 0x59a <__fixunssfsi+0x4c>
 576:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_zero>
 57a:	b1 e0       	ldi	r27, 0x01	; 1
 57c:	08 95       	ret
 57e:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_zero>
 582:	67 2f       	mov	r22, r23
 584:	78 2f       	mov	r23, r24
 586:	88 27       	eor	r24, r24
 588:	b8 5f       	subi	r27, 0xF8	; 248
 58a:	39 f0       	breq	.+14     	; 0x59a <__fixunssfsi+0x4c>
 58c:	b9 3f       	cpi	r27, 0xF9	; 249
 58e:	cc f3       	brlt	.-14     	; 0x582 <__fixunssfsi+0x34>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b3 95       	inc	r27
 598:	d9 f7       	brne	.-10     	; 0x590 <__fixunssfsi+0x42>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__fixunssfsi+0x5c>
 59c:	90 95       	com	r25
 59e:	80 95       	com	r24
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__floatunsisf>:
 5ac:	e8 94       	clt
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <__floatsisf+0x12>

000005b0 <__floatsisf>:
 5b0:	97 fb       	bst	r25, 7
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__floatsisf+0x12>
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	99 23       	and	r25, r25
 5c4:	a9 f0       	breq	.+42     	; 0x5f0 <__floatsisf+0x40>
 5c6:	f9 2f       	mov	r31, r25
 5c8:	96 e9       	ldi	r25, 0x96	; 150
 5ca:	bb 27       	eor	r27, r27
 5cc:	93 95       	inc	r25
 5ce:	f6 95       	lsr	r31
 5d0:	87 95       	ror	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b7 95       	ror	r27
 5d8:	f1 11       	cpse	r31, r1
 5da:	f8 cf       	rjmp	.-16     	; 0x5cc <__floatsisf+0x1c>
 5dc:	fa f4       	brpl	.+62     	; 0x61c <__floatsisf+0x6c>
 5de:	bb 0f       	add	r27, r27
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__floatsisf+0x36>
 5e2:	60 ff       	sbrs	r22, 0
 5e4:	1b c0       	rjmp	.+54     	; 0x61c <__floatsisf+0x6c>
 5e6:	6f 5f       	subi	r22, 0xFF	; 255
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <__floatsisf+0x6c>
 5f0:	88 23       	and	r24, r24
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <__floatsisf+0x48>
 5f4:	96 e9       	ldi	r25, 0x96	; 150
 5f6:	11 c0       	rjmp	.+34     	; 0x61a <__floatsisf+0x6a>
 5f8:	77 23       	and	r23, r23
 5fa:	21 f0       	breq	.+8      	; 0x604 <__floatsisf+0x54>
 5fc:	9e e8       	ldi	r25, 0x8E	; 142
 5fe:	87 2f       	mov	r24, r23
 600:	76 2f       	mov	r23, r22
 602:	05 c0       	rjmp	.+10     	; 0x60e <__floatsisf+0x5e>
 604:	66 23       	and	r22, r22
 606:	71 f0       	breq	.+28     	; 0x624 <__floatsisf+0x74>
 608:	96 e8       	ldi	r25, 0x86	; 134
 60a:	86 2f       	mov	r24, r22
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	2a f0       	brmi	.+10     	; 0x61c <__floatsisf+0x6c>
 612:	9a 95       	dec	r25
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	da f7       	brpl	.-10     	; 0x612 <__floatsisf+0x62>
 61c:	88 0f       	add	r24, r24
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	97 f9       	bld	r25, 7
 624:	08 95       	ret

00000626 <__fp_inf>:
 626:	97 f9       	bld	r25, 7
 628:	9f 67       	ori	r25, 0x7F	; 127
 62a:	80 e8       	ldi	r24, 0x80	; 128
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	08 95       	ret

00000632 <__fp_nan>:
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	80 ec       	ldi	r24, 0xC0	; 192
 636:	08 95       	ret

00000638 <__fp_pscA>:
 638:	00 24       	eor	r0, r0
 63a:	0a 94       	dec	r0
 63c:	16 16       	cp	r1, r22
 63e:	17 06       	cpc	r1, r23
 640:	18 06       	cpc	r1, r24
 642:	09 06       	cpc	r0, r25
 644:	08 95       	ret

00000646 <__fp_pscB>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	14 06       	cpc	r1, r20
 650:	05 06       	cpc	r0, r21
 652:	08 95       	ret

00000654 <__fp_round>:
 654:	09 2e       	mov	r0, r25
 656:	03 94       	inc	r0
 658:	00 0c       	add	r0, r0
 65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0xc>
 65c:	88 23       	and	r24, r24
 65e:	52 f0       	brmi	.+20     	; 0x674 <__fp_round+0x20>
 660:	bb 0f       	add	r27, r27
 662:	40 f4       	brcc	.+16     	; 0x674 <__fp_round+0x20>
 664:	bf 2b       	or	r27, r31
 666:	11 f4       	brne	.+4      	; 0x66c <__fp_round+0x18>
 668:	60 ff       	sbrs	r22, 0
 66a:	04 c0       	rjmp	.+8      	; 0x674 <__fp_round+0x20>
 66c:	6f 5f       	subi	r22, 0xFF	; 255
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__fp_split3>:
 676:	57 fd       	sbrc	r21, 7
 678:	90 58       	subi	r25, 0x80	; 128
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	59 f0       	breq	.+22     	; 0x696 <__fp_splitA+0x10>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	71 f0       	breq	.+28     	; 0x6a0 <__fp_splitA+0x1a>
 684:	47 95       	ror	r20

00000686 <__fp_splitA>:
 686:	88 0f       	add	r24, r24
 688:	97 fb       	bst	r25, 7
 68a:	99 1f       	adc	r25, r25
 68c:	61 f0       	breq	.+24     	; 0x6a6 <__fp_splitA+0x20>
 68e:	9f 3f       	cpi	r25, 0xFF	; 255
 690:	79 f0       	breq	.+30     	; 0x6b0 <__fp_splitA+0x2a>
 692:	87 95       	ror	r24
 694:	08 95       	ret
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	55 1f       	adc	r21, r21
 69e:	f2 cf       	rjmp	.-28     	; 0x684 <__fp_split3+0xe>
 6a0:	46 95       	lsr	r20
 6a2:	f1 df       	rcall	.-30     	; 0x686 <__fp_splitA>
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <__fp_splitA+0x30>
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	f1 cf       	rjmp	.-30     	; 0x692 <__fp_splitA+0xc>
 6b0:	86 95       	lsr	r24
 6b2:	71 05       	cpc	r23, r1
 6b4:	61 05       	cpc	r22, r1
 6b6:	08 94       	sec
 6b8:	08 95       	ret

000006ba <__fp_zero>:
 6ba:	e8 94       	clt

000006bc <__fp_szero>:
 6bc:	bb 27       	eor	r27, r27
 6be:	66 27       	eor	r22, r22
 6c0:	77 27       	eor	r23, r23
 6c2:	cb 01       	movw	r24, r22
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__mulsf3>:
 6c8:	0e 94 77 03 	call	0x6ee	; 0x6ee <__mulsf3x>
 6cc:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_round>
 6d0:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscA>
 6d4:	38 f0       	brcs	.+14     	; 0x6e4 <__mulsf3+0x1c>
 6d6:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscB>
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <__mulsf3+0x1c>
 6dc:	95 23       	and	r25, r21
 6de:	11 f0       	breq	.+4      	; 0x6e4 <__mulsf3+0x1c>
 6e0:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
 6e4:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_nan>
 6e8:	11 24       	eor	r1, r1
 6ea:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>

000006ee <__mulsf3x>:
 6ee:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_split3>
 6f2:	70 f3       	brcs	.-36     	; 0x6d0 <__mulsf3+0x8>

000006f4 <__mulsf3_pse>:
 6f4:	95 9f       	mul	r25, r21
 6f6:	c1 f3       	breq	.-16     	; 0x6e8 <__mulsf3+0x20>
 6f8:	95 0f       	add	r25, r21
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	55 1f       	adc	r21, r21
 6fe:	62 9f       	mul	r22, r18
 700:	f0 01       	movw	r30, r0
 702:	72 9f       	mul	r23, r18
 704:	bb 27       	eor	r27, r27
 706:	f0 0d       	add	r31, r0
 708:	b1 1d       	adc	r27, r1
 70a:	63 9f       	mul	r22, r19
 70c:	aa 27       	eor	r26, r26
 70e:	f0 0d       	add	r31, r0
 710:	b1 1d       	adc	r27, r1
 712:	aa 1f       	adc	r26, r26
 714:	64 9f       	mul	r22, r20
 716:	66 27       	eor	r22, r22
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	66 1f       	adc	r22, r22
 71e:	82 9f       	mul	r24, r18
 720:	22 27       	eor	r18, r18
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	62 1f       	adc	r22, r18
 728:	73 9f       	mul	r23, r19
 72a:	b0 0d       	add	r27, r0
 72c:	a1 1d       	adc	r26, r1
 72e:	62 1f       	adc	r22, r18
 730:	83 9f       	mul	r24, r19
 732:	a0 0d       	add	r26, r0
 734:	61 1d       	adc	r22, r1
 736:	22 1f       	adc	r18, r18
 738:	74 9f       	mul	r23, r20
 73a:	33 27       	eor	r19, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	23 1f       	adc	r18, r19
 742:	84 9f       	mul	r24, r20
 744:	60 0d       	add	r22, r0
 746:	21 1d       	adc	r18, r1
 748:	82 2f       	mov	r24, r18
 74a:	76 2f       	mov	r23, r22
 74c:	6a 2f       	mov	r22, r26
 74e:	11 24       	eor	r1, r1
 750:	9f 57       	subi	r25, 0x7F	; 127
 752:	50 40       	sbci	r21, 0x00	; 0
 754:	9a f0       	brmi	.+38     	; 0x77c <__mulsf3_pse+0x88>
 756:	f1 f0       	breq	.+60     	; 0x794 <__mulsf3_pse+0xa0>
 758:	88 23       	and	r24, r24
 75a:	4a f0       	brmi	.+18     	; 0x76e <__mulsf3_pse+0x7a>
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	bb 1f       	adc	r27, r27
 762:	66 1f       	adc	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	91 50       	subi	r25, 0x01	; 1
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	a9 f7       	brne	.-22     	; 0x758 <__mulsf3_pse+0x64>
 76e:	9e 3f       	cpi	r25, 0xFE	; 254
 770:	51 05       	cpc	r21, r1
 772:	80 f0       	brcs	.+32     	; 0x794 <__mulsf3_pse+0xa0>
 774:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
 778:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>
 77c:	5f 3f       	cpi	r21, 0xFF	; 255
 77e:	e4 f3       	brlt	.-8      	; 0x778 <__mulsf3_pse+0x84>
 780:	98 3e       	cpi	r25, 0xE8	; 232
 782:	d4 f3       	brlt	.-12     	; 0x778 <__mulsf3_pse+0x84>
 784:	86 95       	lsr	r24
 786:	77 95       	ror	r23
 788:	67 95       	ror	r22
 78a:	b7 95       	ror	r27
 78c:	f7 95       	ror	r31
 78e:	e7 95       	ror	r30
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	c1 f7       	brne	.-16     	; 0x784 <__mulsf3_pse+0x90>
 794:	fe 2b       	or	r31, r30
 796:	88 0f       	add	r24, r24
 798:	91 1d       	adc	r25, r1
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	97 f9       	bld	r25, 7
 7a0:	08 95       	ret

000007a2 <_exit>:
 7a2:	f8 94       	cli

000007a4 <__stop_program>:
 7a4:	ff cf       	rjmp	.-2      	; 0x7a4 <__stop_program>
