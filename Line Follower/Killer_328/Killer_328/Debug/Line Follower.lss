
Line Follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c64  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003af  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007be  00000000  00000000  00001997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d6  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c7  00000000  00000000  000025ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>


int main(void)
{
	init_ports();
  90:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <init_ports>
	init_timer1();
  94:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_timer1>
	
	
	while (1)
	{
		
		  if( PIND & (1<<PD2)){
  98:	4a 9b       	sbis	0x09, 2	; 9
  9a:	09 c0       	rjmp	.+18     	; 0xae <main+0x1e>
			
motor_right(MOTOR_BACKWARD,120);
  9c:	68 e7       	ldi	r22, 0x78	; 120
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
motor_left(MOTOR_FORWARD,30);
  a4:	6e e1       	ldi	r22, 0x1E	; 30
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
  ac:	f5 cf       	rjmp	.-22     	; 0x98 <main+0x8>

		                      }
		 
		 
		    else if( PIND & (1<<PD3)){
  ae:	4b 9b       	sbis	0x09, 3	; 9
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <main+0x28>
		                motor_turnr();
  b2:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
  b6:	f0 cf       	rjmp	.-32     	; 0x98 <main+0x8>
		                              }
								
		
	            else if( PIND & (1<<PD4)){
  b8:	4c 9b       	sbis	0x09, 4	; 9
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <main+0x32>
				
			      motor_turnl();
  bc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_turnl>
  c0:	eb cf       	rjmp	.-42     	; 0x98 <main+0x8>
				  
		                            }
			
			
		          else if( PIND & (1<<PD5)){
  c2:	4d 9b       	sbis	0x09, 5	; 9
  c4:	e9 cf       	rjmp	.-46     	; 0x98 <main+0x8>
				
			         motor_right(MOTOR_BACKWARD,30);
  c6:	6e e1       	ldi	r22, 0x1E	; 30
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
			         motor_left(MOTOR_FORWARD,120);
  ce:	68 e7       	ldi	r22, 0x78	; 120
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
  d6:	e0 cf       	rjmp	.-64     	; 0x98 <main+0x8>

000000d8 <init_timer1>:
*
*****************************************************************/

void init_timer1()
{
	TCCR1A |= (1<<WGM10);//WGM10=1 PWM, Phase Correct, 8-bit (pag.97 tabla 39)
  d8:	e0 e8       	ldi	r30, 0x80	; 128
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);//Envía nivel bajo por OC1A/OC1B on Compare Match(Pag.96 tabla 36)
  e2:	80 81       	ld	r24, Z
  e4:	80 6a       	ori	r24, 0xA0	; 160
  e6:	80 83       	st	Z, r24
	//when up-counting. Envía nivel alto por OC1A/OC1B on Compare
	//Match when downcounting.
	//Ver figura 40 en página 93

	TCCR1B |= (1<<CS12)|(1<<CS10); //frecuencia=fcpu/64 ~ 15Khz (frecuencia para los motores)
  e8:	e1 e8       	ldi	r30, 0x81	; 129
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	85 60       	ori	r24, 0x05	; 5
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <motor_right>:
*****************************************************************/



void motor_right(uint8_t dir,uint8_t speed)
{
  f4:	cf 93       	push	r28
	//Dirección
	if(dir == MOTOR_STOP)
  f6:	81 11       	cpse	r24, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <motor_right+0xc>
	{
		PORTB &= (~(1<<PB0));
  fa:	28 98       	cbi	0x05, 0	; 5
		PORTB &= (~(1<<PB4));
  fc:	2c 98       	cbi	0x05, 4	; 5
  fe:	09 c0       	rjmp	.+18     	; 0x112 <motor_right+0x1e>
	}

	else if(dir == MOTOR_BACKWARD)
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	19 f4       	brne	.+6      	; 0x10a <motor_right+0x16>
	{
		PORTB &= (~(1<<PB0));
 104:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PB4);
 106:	2c 9a       	sbi	0x05, 4	; 5
 108:	04 c0       	rjmp	.+8      	; 0x112 <motor_right+0x1e>
	}
	else if(dir == MOTOR_FORWARD)
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	11 f4       	brne	.+4      	; 0x112 <motor_right+0x1e>
	{
		PORTB &= (~(1<<PB4));
 10e:	2c 98       	cbi	0x05, 4	; 5
		PORTB |= (1<<PB0);
 110:	28 9a       	sbi	0x05, 0	; 5
	}

	//Velocidad
	uint8_t sreg = SREG;//Status Register
 112:	cf b7       	in	r28, 0x3f	; 63

	cli();
 114:	f8 94       	cli

	OCR1A = (uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__floatunsisf>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	4f e7       	ldi	r20, 0x7F	; 127
 126:	53 e4       	ldi	r21, 0x43	; 67
 128:	0e 94 3a 02 	call	0x474	; 0x474 <__divsf3>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	46 e1       	ldi	r20, 0x16	; 22
 132:	53 e4       	ldi	r21, 0x43	; 67
 134:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulsf3>
 138:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 142:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	SREG = sreg;
 146:	cf bf       	out	0x3f, r28	; 63
}
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <motor_left>:
* speed = cualquier valor de 0 a 255
* Ejemplo:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_left(uint8_t dir,uint8_t speed)
{
 14c:	cf 93       	push	r28
	//Dirección
	if(dir == MOTOR_STOP)
 14e:	81 11       	cpse	r24, r1
 150:	03 c0       	rjmp	.+6      	; 0x158 <motor_left+0xc>
	{
		PORTC &= (~(1<<PC0));
 152:	40 98       	cbi	0x08, 0	; 8
		PORTC &= (~(1<<PC1));
 154:	41 98       	cbi	0x08, 1	; 8
 156:	09 c0       	rjmp	.+18     	; 0x16a <motor_left+0x1e>
	}

	else if(dir == MOTOR_FORWARD)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	19 f4       	brne	.+6      	; 0x162 <motor_left+0x16>
	{
		PORTC &= (~(1<<PC1));
 15c:	41 98       	cbi	0x08, 1	; 8
		PORTC |= (1<<PC0);
 15e:	40 9a       	sbi	0x08, 0	; 8
 160:	04 c0       	rjmp	.+8      	; 0x16a <motor_left+0x1e>
	}
	else if(dir == MOTOR_BACKWARD)
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	11 f4       	brne	.+4      	; 0x16a <motor_left+0x1e>
	{
		PORTC &= (~(1<<PC0));
 166:	40 98       	cbi	0x08, 0	; 8
		PORTC |= (1<<PC1);
 168:	41 9a       	sbi	0x08, 1	; 8
	}

	//Velocidad
	uint8_t sreg = SREG;
 16a:	cf b7       	in	r28, 0x3f	; 63

	cli();
 16c:	f8 94       	cli

	OCR1B = (uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__floatunsisf>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	4f e7       	ldi	r20, 0x7F	; 127
 17e:	53 e4       	ldi	r21, 0x43	; 67
 180:	0e 94 3a 02 	call	0x474	; 0x474 <__divsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	46 e1       	ldi	r20, 0x16	; 22
 18a:	53 e4       	ldi	r21, 0x43	; 67
 18c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulsf3>
 190:	0e 94 ac 02 	call	0x558	; 0x558 <__fixunssfsi>
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 19a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	SREG = sreg;
 19e:	cf bf       	out	0x3f, r28	; 63
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <init_ports>:
	* PC0		IN3	 |--> LEFT MOTOR
	* PC1		IN4 -
	* --------------
	*/
	//Salidas para PWM
	DDRB |= (1<<PB1); //OC1A Control de velocidad para motor Derecho
 1a4:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<PB2); //OC1B Control de velocidad para motor izquierdo 
 1a6:	22 9a       	sbi	0x04, 2	; 4
	
	//Salidas para dirección
	DDRB |= (1 << PB0); //Control de avance motor derecho
 1a8:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << PB4); //Control de reversa motor derecho
 1aa:	24 9a       	sbi	0x04, 4	; 4
	DDRC |= (1 << PC0); //Control de avanza motor izquierdo
 1ac:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1 << PC1); //Control de reversa motor izquierdo
 1ae:	39 9a       	sbi	0x07, 1	; 7
	
	//Entradas sensor IR
	
	DDRD &= ~(1 << PD2);
 1b0:	52 98       	cbi	0x0a, 2	; 10
	DDRD &= ~(1 << PD3);
 1b2:	53 98       	cbi	0x0a, 3	; 10
	DDRD &= ~(1 << PD4);
 1b4:	54 98       	cbi	0x0a, 4	; 10
	DDRD &= ~(1 << PD5);
 1b6:	55 98       	cbi	0x0a, 5	; 10

		
	/*****************************************************************
	* Definición de puertos hacia LEDs
	*******************************************************************/										
	DDRB |= 1 << PB5; //PB5 
 1b8:	25 9a       	sbi	0x04, 5	; 4
 1ba:	08 95       	ret

000001bc <motor_turnr>:

void motor_turnr(void){
	
	// ejemplo del argumento motor_right (comando adelante o atras o se detiene ,  velocidad)
	
	motor_right(MOTOR_BACKWARD,100);
 1bc:	64 e6       	ldi	r22, 0x64	; 100
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
	motor_left(MOTOR_FORWARD,80);
 1c4:	60 e5       	ldi	r22, 0x50	; 80
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
 1cc:	08 95       	ret

000001ce <motor_turnl>:
	
	}
	
	void motor_turnl(void){
		
	motor_right(MOTOR_BACKWARD,80);
 1ce:	60 e5       	ldi	r22, 0x50	; 80
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
	motor_left(MOTOR_FORWARD,100); 
 1d6:	64 e6       	ldi	r22, 0x64	; 100
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
 1de:	08 95       	ret

000001e0 <motor_f>:
		
	}
	
	void motor_f(void){
		
		motor_right(MOTOR_FORWARD,86);
 1e0:	66 e5       	ldi	r22, 0x56	; 86
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
		motor_left(MOTOR_FORWARD,86);
 1e8:	66 e5       	ldi	r22, 0x56	; 86
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
 1f0:	08 95       	ret

000001f2 <motor_b>:
		
	}

    void motor_b(void){
	
	motor_right(MOTOR_BACKWARD,86);
 1f2:	66 e5       	ldi	r22, 0x56	; 86
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
	motor_left(MOTOR_BACKWARD,86);
 1fa:	66 e5       	ldi	r22, 0x56	; 86
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
 202:	08 95       	ret

00000204 <motor_s>:
    }
	
    void motor_s(void){
	
	motor_right(MOTOR_STOP,1);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 7a 00 	call	0xf4	; 0xf4 <motor_right>
	motor_left(MOTOR_STOP,1);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 a6 00 	call	0x14c	; 0x14c <motor_left>
 214:	08 95       	ret

00000216 <__vector_18>:
/************************************************************************
	Rutina de atenciÃ³n a las interrupciones del USART
*************************************************************************/

ISR (USART_RX_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	USART_received_char=UDR0; //Lee un dato de la terminal
 238:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 23c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//USART_transmit_string("El caracter tecleado es: "); //EnvÃ­a el texto: "El caracter tecleado es: "
	//USART_transmit(USART_received_char); //EnvÃ­a a la terminal el caracter:
	
	if(USART_received_char == 0x41)// 'A'
 240:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 244:	81 34       	cpi	r24, 0x41	; 65
 246:	19 f4       	brne	.+6      	; 0x24e <__vector_18+0x38>
	{
		
		//USART_transmit_string(" AVANZA "); //EnvÃ­a el texto 
			motor_f();
 248:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <motor_f>
 24c:	02 c1       	rjmp	.+516    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
			

		
	}
	else if (USART_received_char == 0x53 )// ' S '
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 252:	83 35       	cpi	r24, 0x53	; 83
 254:	19 f4       	brne	.+6      	; 0x25c <__vector_18+0x46>
	{
		
		//USART_transmit_string(" RETROCEDE "); //EnvÃ­a el texto
		motor_b();
 256:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motor_b>
 25a:	fb c0       	rjmp	.+502    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	}
	else if (USART_received_char == 0x44 )// ' D '
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 260:	84 34       	cpi	r24, 0x44	; 68
 262:	71 f4       	brne	.+28     	; 0x280 <__vector_18+0x6a>
	{
		
		//USART_transmit_string(" VUELTA A LA IZQUIERDA "); //EnvÃ­a el texto
		motor_turnl();
 264:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_turnl>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f e7       	ldi	r18, 0x7F	; 127
 26a:	44 e5       	ldi	r20, 0x54	; 84
 26c:	5d e0       	ldi	r21, 0x0D	; 13
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	40 40       	sbci	r20, 0x00	; 0
 272:	50 40       	sbci	r21, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <__vector_18+0x58>
 276:	00 c0       	rjmp	.+0      	; 0x278 <__vector_18+0x62>
 278:	00 00       	nop
		_delay_ms(273);
		motor_s();
 27a:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 27e:	e9 c0       	rjmp	.+466    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	}
	else if (USART_received_char == 0x46 )// ' F '
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 284:	86 34       	cpi	r24, 0x46	; 70
 286:	71 f4       	brne	.+28     	; 0x2a4 <__vector_18+0x8e>
	{
		
		//USART_transmit_string(" VUELTA A LA DERECHA "); //EnvÃ­a el texto "
		motor_turnr();
 288:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	9b ea       	ldi	r25, 0xAB	; 171
 290:	2d e0       	ldi	r18, 0x0D	; 13
 292:	81 50       	subi	r24, 0x01	; 1
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <__vector_18+0x7c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <__vector_18+0x86>
 29c:	00 00       	nop
		_delay_ms(280);
		motor_s();
 29e:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 2a2:	d7 c0       	rjmp	.+430    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	}
	
	 else if (USART_received_char == 0x47 ) //' G '
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2a8:	87 34       	cpi	r24, 0x47	; 71
 2aa:	19 f4       	brne	.+6      	; 0x2b2 <__vector_18+0x9c>
	{
	
		//USART_transmit_string(" SE DETIENE "); //EnvÃ­a el texto
		motor_s();
 2ac:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 2b0:	d0 c0       	rjmp	.+416    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	}
	
	 else if (USART_received_char == 0x48 ) //' H ' ----------------------------------------
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2b6:	88 34       	cpi	r24, 0x48	; 72
 2b8:	71 f4       	brne	.+28     	; 0x2d6 <__vector_18+0xc0>
	 {
		 
		 motor_turnr();
 2ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
 2be:	4f e7       	ldi	r20, 0x7F	; 127
 2c0:	57 e9       	ldi	r21, 0x97	; 151
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	41 50       	subi	r20, 0x01	; 1
 2c6:	50 40       	sbci	r21, 0x00	; 0
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <__vector_18+0xae>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <__vector_18+0xb8>
 2ce:	00 00       	nop
		 _delay_ms(135);
		 motor_s();
 2d0:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 2d4:	be c0       	rjmp	.+380    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	 }
	 else if (USART_received_char == 0x42 ) //' B '
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2da:	82 34       	cpi	r24, 0x42	; 66
 2dc:	71 f4       	brne	.+28     	; 0x2fa <__vector_18+0xe4>
	 {
		 
		 motor_turnl();
 2de:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_turnl>
 2e2:	9f e7       	ldi	r25, 0x7F	; 127
 2e4:	27 e9       	ldi	r18, 0x97	; 151
 2e6:	46 e0       	ldi	r20, 0x06	; 6
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	20 40       	sbci	r18, 0x00	; 0
 2ec:	40 40       	sbci	r20, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <__vector_18+0xd2>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <__vector_18+0xdc>
 2f2:	00 00       	nop
		 _delay_ms(135);
		 motor_s();
 2f4:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 2f8:	ac c0       	rjmp	.+344    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	 }
	  else if (USART_received_char == 0x43 ) //' C '
 2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2fe:	83 34       	cpi	r24, 0x43	; 67
 300:	19 f4       	brne	.+6      	; 0x308 <__vector_18+0xf2>
	  {
		  
		  motor_turnr();
 302:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
 306:	a5 c0       	rjmp	.+330    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	  }
	   else if (USART_received_char == 0x45 ) //' E '
 308:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 30c:	85 34       	cpi	r24, 0x45	; 69
 30e:	c9 f4       	brne	.+50     	; 0x342 <__vector_18+0x12c>
	   {
		   
		   motor_f();
 310:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <motor_f>
 314:	5f ef       	ldi	r21, 0xFF	; 255
 316:	87 e5       	ldi	r24, 0x57	; 87
 318:	9b e1       	ldi	r25, 0x1B	; 27
 31a:	51 50       	subi	r21, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <__vector_18+0x104>
 322:	00 c0       	rjmp	.+0      	; 0x324 <__vector_18+0x10e>
 324:	00 00       	nop
		   _delay_ms(560);
		   motor_b();
 326:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <motor_b>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	41 e5       	ldi	r20, 0x51	; 81
 32e:	5c e1       	ldi	r21, 0x1C	; 28
 330:	21 50       	subi	r18, 0x01	; 1
 332:	40 40       	sbci	r20, 0x00	; 0
 334:	50 40       	sbci	r21, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <__vector_18+0x11a>
 338:	00 c0       	rjmp	.+0      	; 0x33a <__vector_18+0x124>
 33a:	00 00       	nop
		   _delay_ms(580);
		   motor_s();
 33c:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 340:	88 c0       	rjmp	.+272    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
	   }
	   
	    else if (USART_received_char == 0x49 ) //' I '
 342:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 346:	89 34       	cpi	r24, 0x49	; 73
 348:	99 f4       	brne	.+38     	; 0x370 <__vector_18+0x15a>
 34a:	26 e0       	ldi	r18, 0x06	; 6
 34c:	30 e0       	ldi	r19, 0x00	; 0
		    
		    	
		    	int i;
		    	for (i=0;i<=5;i++)
		    	{
			    	PORTB ^= 1 << PB3;
 34e:	98 e0       	ldi	r25, 0x08	; 8
 350:	85 b1       	in	r24, 0x05	; 5
 352:	89 27       	eor	r24, r25
 354:	85 b9       	out	0x05, r24	; 5
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	41 ee       	ldi	r20, 0xE1	; 225
 35a:	54 e0       	ldi	r21, 0x04	; 4
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	40 40       	sbci	r20, 0x00	; 0
 360:	50 40       	sbci	r21, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <__vector_18+0x146>
 364:	00 c0       	rjmp	.+0      	; 0x366 <__vector_18+0x150>
 366:	00 00       	nop
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	31 09       	sbc	r19, r1
	    else if (USART_received_char == 0x49 ) //' I '
	    {
		    
		    	
		    	int i;
		    	for (i=0;i<=5;i++)
 36c:	89 f7       	brne	.-30     	; 0x350 <__vector_18+0x13a>
 36e:	71 c0       	rjmp	.+226    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
		    	{
			    	PORTB ^= 1 << PB3;
			    	_delay_ms(100);
		    	}
	    }
		 else if (USART_received_char == 0x61 ) //' a '
 370:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 374:	81 36       	cpi	r24, 0x61	; 97
 376:	09 f0       	breq	.+2      	; 0x37a <__vector_18+0x164>
 378:	45 c0       	rjmp	.+138    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
		 {
			 
			 motor_turnl();
 37a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_turnl>
 37e:	8f e7       	ldi	r24, 0x7F	; 127
 380:	97 e9       	ldi	r25, 0x97	; 151
 382:	26 e0       	ldi	r18, 0x06	; 6
 384:	81 50       	subi	r24, 0x01	; 1
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	20 40       	sbci	r18, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <__vector_18+0x16e>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <__vector_18+0x178>
 38e:	00 00       	nop
			 _delay_ms(135);
			 motor_f();
 390:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <motor_f>
 394:	4f ef       	ldi	r20, 0xFF	; 255
 396:	57 e5       	ldi	r21, 0x57	; 87
 398:	8b e1       	ldi	r24, 0x1B	; 27
 39a:	41 50       	subi	r20, 0x01	; 1
 39c:	50 40       	sbci	r21, 0x00	; 0
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <__vector_18+0x184>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <__vector_18+0x18e>
 3a4:	00 00       	nop
			 _delay_ms(560);
			 motor_turnr();
 3a6:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	2b ea       	ldi	r18, 0xAB	; 171
 3ae:	4d e0       	ldi	r20, 0x0D	; 13
 3b0:	91 50       	subi	r25, 0x01	; 1
 3b2:	20 40       	sbci	r18, 0x00	; 0
 3b4:	40 40       	sbci	r20, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <__vector_18+0x19a>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <__vector_18+0x1a4>
 3ba:	00 00       	nop
			 _delay_ms(280);
			 motor_f();
 3bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <motor_f>
 3c0:	5f ef       	ldi	r21, 0xFF	; 255
 3c2:	8b ea       	ldi	r24, 0xAB	; 171
 3c4:	9d e0       	ldi	r25, 0x0D	; 13
 3c6:	51 50       	subi	r21, 0x01	; 1
 3c8:	80 40       	sbci	r24, 0x00	; 0
 3ca:	90 40       	sbci	r25, 0x00	; 0
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <__vector_18+0x1b0>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <__vector_18+0x1ba>
 3d0:	00 00       	nop
			 _delay_ms(280);
			 motor_turnr();
 3d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	4b ea       	ldi	r20, 0xAB	; 171
 3da:	5d e0       	ldi	r21, 0x0D	; 13
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	40 40       	sbci	r20, 0x00	; 0
 3e0:	50 40       	sbci	r21, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <__vector_18+0x1c6>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_18+0x1d0>
 3e6:	00 00       	nop
			 _delay_ms(280);
			 motor_f();
 3e8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <motor_f>
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	9b ea       	ldi	r25, 0xAB	; 171
 3f0:	2d e0       	ldi	r18, 0x0D	; 13
 3f2:	81 50       	subi	r24, 0x01	; 1
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <__vector_18+0x1dc>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <__vector_18+0x1e6>
 3fc:	00 00       	nop
			 _delay_ms(280);
			 motor_s();
 3fe:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
 402:	27 c0       	rjmp	.+78     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
			 
			 
		 }
		  else if (USART_received_char == 0x62 ) //'b'
 404:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 408:	82 36       	cpi	r24, 0x62	; 98
 40a:	19 f5       	brne	.+70     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
		  {
			  
			  motor_turnl();
 40c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <motor_turnl>
 410:	4f e7       	ldi	r20, 0x7F	; 127
 412:	57 e9       	ldi	r21, 0x97	; 151
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	41 50       	subi	r20, 0x01	; 1
 418:	50 40       	sbci	r21, 0x00	; 0
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 420:	00 00       	nop
			  _delay_ms(135);
			  motor_f();
 422:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <motor_f>
 426:	9f ef       	ldi	r25, 0xFF	; 255
 428:	27 e8       	ldi	r18, 0x87	; 135
 42a:	43 e1       	ldi	r20, 0x13	; 19
 42c:	91 50       	subi	r25, 0x01	; 1
 42e:	20 40       	sbci	r18, 0x00	; 0
 430:	40 40       	sbci	r20, 0x00	; 0
 432:	e1 f7       	brne	.-8      	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 436:	00 00       	nop
			  _delay_ms(400);
			  motor_turnr();
 438:	0e 94 de 00 	call	0x1bc	; 0x1bc <motor_turnr>
 43c:	5f ef       	ldi	r21, 0xFF	; 255
 43e:	82 e5       	ldi	r24, 0x52	; 82
 440:	97 e0       	ldi	r25, 0x07	; 7
 442:	51 50       	subi	r21, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
			  _delay_ms(150);
			  
			  
			  motor_s();
 44e:	0e 94 02 01 	call	0x204	; 0x204 <motor_s>
			  
			  
		  }
	 }
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__divsf3>:
 474:	0e 94 4e 02 	call	0x49c	; 0x49c <__divsf3x>
 478:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_round>
 47c:	0e 94 28 03 	call	0x650	; 0x650 <__fp_pscB>
 480:	58 f0       	brcs	.+22     	; 0x498 <__divsf3+0x24>
 482:	0e 94 21 03 	call	0x642	; 0x642 <__fp_pscA>
 486:	40 f0       	brcs	.+16     	; 0x498 <__divsf3+0x24>
 488:	29 f4       	brne	.+10     	; 0x494 <__divsf3+0x20>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	29 f0       	breq	.+10     	; 0x498 <__divsf3+0x24>
 48e:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_inf>
 492:	51 11       	cpse	r21, r1
 494:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>
 498:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_nan>

0000049c <__divsf3x>:
 49c:	0e 94 40 03 	call	0x680	; 0x680 <__fp_split3>
 4a0:	68 f3       	brcs	.-38     	; 0x47c <__divsf3+0x8>

000004a2 <__divsf3_pse>:
 4a2:	99 23       	and	r25, r25
 4a4:	b1 f3       	breq	.-20     	; 0x492 <__divsf3+0x1e>
 4a6:	55 23       	and	r21, r21
 4a8:	91 f3       	breq	.-28     	; 0x48e <__divsf3+0x1a>
 4aa:	95 1b       	sub	r25, r21
 4ac:	55 0b       	sbc	r21, r21
 4ae:	bb 27       	eor	r27, r27
 4b0:	aa 27       	eor	r26, r26
 4b2:	62 17       	cp	r22, r18
 4b4:	73 07       	cpc	r23, r19
 4b6:	84 07       	cpc	r24, r20
 4b8:	38 f0       	brcs	.+14     	; 0x4c8 <__divsf3_pse+0x26>
 4ba:	9f 5f       	subi	r25, 0xFF	; 255
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	44 1f       	adc	r20, r20
 4c4:	aa 1f       	adc	r26, r26
 4c6:	a9 f3       	breq	.-22     	; 0x4b2 <__divsf3_pse+0x10>
 4c8:	35 d0       	rcall	.+106    	; 0x534 <__divsf3_pse+0x92>
 4ca:	0e 2e       	mov	r0, r30
 4cc:	3a f0       	brmi	.+14     	; 0x4dc <__divsf3_pse+0x3a>
 4ce:	e0 e8       	ldi	r30, 0x80	; 128
 4d0:	32 d0       	rcall	.+100    	; 0x536 <__divsf3_pse+0x94>
 4d2:	91 50       	subi	r25, 0x01	; 1
 4d4:	50 40       	sbci	r21, 0x00	; 0
 4d6:	e6 95       	lsr	r30
 4d8:	00 1c       	adc	r0, r0
 4da:	ca f7       	brpl	.-14     	; 0x4ce <__divsf3_pse+0x2c>
 4dc:	2b d0       	rcall	.+86     	; 0x534 <__divsf3_pse+0x92>
 4de:	fe 2f       	mov	r31, r30
 4e0:	29 d0       	rcall	.+82     	; 0x534 <__divsf3_pse+0x92>
 4e2:	66 0f       	add	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	bb 1f       	adc	r27, r27
 4ea:	26 17       	cp	r18, r22
 4ec:	37 07       	cpc	r19, r23
 4ee:	48 07       	cpc	r20, r24
 4f0:	ab 07       	cpc	r26, r27
 4f2:	b0 e8       	ldi	r27, 0x80	; 128
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <__divsf3_pse+0x56>
 4f6:	bb 0b       	sbc	r27, r27
 4f8:	80 2d       	mov	r24, r0
 4fa:	bf 01       	movw	r22, r30
 4fc:	ff 27       	eor	r31, r31
 4fe:	93 58       	subi	r25, 0x83	; 131
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	3a f0       	brmi	.+14     	; 0x512 <__divsf3_pse+0x70>
 504:	9e 3f       	cpi	r25, 0xFE	; 254
 506:	51 05       	cpc	r21, r1
 508:	78 f0       	brcs	.+30     	; 0x528 <__divsf3_pse+0x86>
 50a:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_inf>
 50e:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>
 512:	5f 3f       	cpi	r21, 0xFF	; 255
 514:	e4 f3       	brlt	.-8      	; 0x50e <__divsf3_pse+0x6c>
 516:	98 3e       	cpi	r25, 0xE8	; 232
 518:	d4 f3       	brlt	.-12     	; 0x50e <__divsf3_pse+0x6c>
 51a:	86 95       	lsr	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f7 95       	ror	r31
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	c9 f7       	brne	.-14     	; 0x51a <__divsf3_pse+0x78>
 528:	88 0f       	add	r24, r24
 52a:	91 1d       	adc	r25, r1
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret
 534:	e1 e0       	ldi	r30, 0x01	; 1
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	bb 1f       	adc	r27, r27
 53e:	62 17       	cp	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	ba 07       	cpc	r27, r26
 546:	20 f0       	brcs	.+8      	; 0x550 <__divsf3_pse+0xae>
 548:	62 1b       	sub	r22, r18
 54a:	73 0b       	sbc	r23, r19
 54c:	84 0b       	sbc	r24, r20
 54e:	ba 0b       	sbc	r27, r26
 550:	ee 1f       	adc	r30, r30
 552:	88 f7       	brcc	.-30     	; 0x536 <__divsf3_pse+0x94>
 554:	e0 95       	com	r30
 556:	08 95       	ret

00000558 <__fixunssfsi>:
 558:	0e 94 48 03 	call	0x690	; 0x690 <__fp_splitA>
 55c:	88 f0       	brcs	.+34     	; 0x580 <__fixunssfsi+0x28>
 55e:	9f 57       	subi	r25, 0x7F	; 127
 560:	98 f0       	brcs	.+38     	; 0x588 <__fixunssfsi+0x30>
 562:	b9 2f       	mov	r27, r25
 564:	99 27       	eor	r25, r25
 566:	b7 51       	subi	r27, 0x17	; 23
 568:	b0 f0       	brcs	.+44     	; 0x596 <__fixunssfsi+0x3e>
 56a:	e1 f0       	breq	.+56     	; 0x5a4 <__fixunssfsi+0x4c>
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	1a f0       	brmi	.+6      	; 0x57c <__fixunssfsi+0x24>
 576:	ba 95       	dec	r27
 578:	c9 f7       	brne	.-14     	; 0x56c <__fixunssfsi+0x14>
 57a:	14 c0       	rjmp	.+40     	; 0x5a4 <__fixunssfsi+0x4c>
 57c:	b1 30       	cpi	r27, 0x01	; 1
 57e:	91 f0       	breq	.+36     	; 0x5a4 <__fixunssfsi+0x4c>
 580:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_zero>
 584:	b1 e0       	ldi	r27, 0x01	; 1
 586:	08 95       	ret
 588:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__fp_zero>
 58c:	67 2f       	mov	r22, r23
 58e:	78 2f       	mov	r23, r24
 590:	88 27       	eor	r24, r24
 592:	b8 5f       	subi	r27, 0xF8	; 248
 594:	39 f0       	breq	.+14     	; 0x5a4 <__fixunssfsi+0x4c>
 596:	b9 3f       	cpi	r27, 0xF9	; 249
 598:	cc f3       	brlt	.-14     	; 0x58c <__fixunssfsi+0x34>
 59a:	86 95       	lsr	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b3 95       	inc	r27
 5a2:	d9 f7       	brne	.-10     	; 0x59a <__fixunssfsi+0x42>
 5a4:	3e f4       	brtc	.+14     	; 0x5b4 <__fixunssfsi+0x5c>
 5a6:	90 95       	com	r25
 5a8:	80 95       	com	r24
 5aa:	70 95       	com	r23
 5ac:	61 95       	neg	r22
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	08 95       	ret

000005b6 <__floatunsisf>:
 5b6:	e8 94       	clt
 5b8:	09 c0       	rjmp	.+18     	; 0x5cc <__floatsisf+0x12>

000005ba <__floatsisf>:
 5ba:	97 fb       	bst	r25, 7
 5bc:	3e f4       	brtc	.+14     	; 0x5cc <__floatsisf+0x12>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	99 23       	and	r25, r25
 5ce:	a9 f0       	breq	.+42     	; 0x5fa <__floatsisf+0x40>
 5d0:	f9 2f       	mov	r31, r25
 5d2:	96 e9       	ldi	r25, 0x96	; 150
 5d4:	bb 27       	eor	r27, r27
 5d6:	93 95       	inc	r25
 5d8:	f6 95       	lsr	r31
 5da:	87 95       	ror	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b7 95       	ror	r27
 5e2:	f1 11       	cpse	r31, r1
 5e4:	f8 cf       	rjmp	.-16     	; 0x5d6 <__floatsisf+0x1c>
 5e6:	fa f4       	brpl	.+62     	; 0x626 <__floatsisf+0x6c>
 5e8:	bb 0f       	add	r27, r27
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <__floatsisf+0x36>
 5ec:	60 ff       	sbrs	r22, 0
 5ee:	1b c0       	rjmp	.+54     	; 0x626 <__floatsisf+0x6c>
 5f0:	6f 5f       	subi	r22, 0xFF	; 255
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	8f 4f       	sbci	r24, 0xFF	; 255
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	16 c0       	rjmp	.+44     	; 0x626 <__floatsisf+0x6c>
 5fa:	88 23       	and	r24, r24
 5fc:	11 f0       	breq	.+4      	; 0x602 <__floatsisf+0x48>
 5fe:	96 e9       	ldi	r25, 0x96	; 150
 600:	11 c0       	rjmp	.+34     	; 0x624 <__floatsisf+0x6a>
 602:	77 23       	and	r23, r23
 604:	21 f0       	breq	.+8      	; 0x60e <__floatsisf+0x54>
 606:	9e e8       	ldi	r25, 0x8E	; 142
 608:	87 2f       	mov	r24, r23
 60a:	76 2f       	mov	r23, r22
 60c:	05 c0       	rjmp	.+10     	; 0x618 <__floatsisf+0x5e>
 60e:	66 23       	and	r22, r22
 610:	71 f0       	breq	.+28     	; 0x62e <__floatsisf+0x74>
 612:	96 e8       	ldi	r25, 0x86	; 134
 614:	86 2f       	mov	r24, r22
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	2a f0       	brmi	.+10     	; 0x626 <__floatsisf+0x6c>
 61c:	9a 95       	dec	r25
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	da f7       	brpl	.-10     	; 0x61c <__floatsisf+0x62>
 626:	88 0f       	add	r24, r24
 628:	96 95       	lsr	r25
 62a:	87 95       	ror	r24
 62c:	97 f9       	bld	r25, 7
 62e:	08 95       	ret

00000630 <__fp_inf>:
 630:	97 f9       	bld	r25, 7
 632:	9f 67       	ori	r25, 0x7F	; 127
 634:	80 e8       	ldi	r24, 0x80	; 128
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	08 95       	ret

0000063c <__fp_nan>:
 63c:	9f ef       	ldi	r25, 0xFF	; 255
 63e:	80 ec       	ldi	r24, 0xC0	; 192
 640:	08 95       	ret

00000642 <__fp_pscA>:
 642:	00 24       	eor	r0, r0
 644:	0a 94       	dec	r0
 646:	16 16       	cp	r1, r22
 648:	17 06       	cpc	r1, r23
 64a:	18 06       	cpc	r1, r24
 64c:	09 06       	cpc	r0, r25
 64e:	08 95       	ret

00000650 <__fp_pscB>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	12 16       	cp	r1, r18
 656:	13 06       	cpc	r1, r19
 658:	14 06       	cpc	r1, r20
 65a:	05 06       	cpc	r0, r21
 65c:	08 95       	ret

0000065e <__fp_round>:
 65e:	09 2e       	mov	r0, r25
 660:	03 94       	inc	r0
 662:	00 0c       	add	r0, r0
 664:	11 f4       	brne	.+4      	; 0x66a <__fp_round+0xc>
 666:	88 23       	and	r24, r24
 668:	52 f0       	brmi	.+20     	; 0x67e <__fp_round+0x20>
 66a:	bb 0f       	add	r27, r27
 66c:	40 f4       	brcc	.+16     	; 0x67e <__fp_round+0x20>
 66e:	bf 2b       	or	r27, r31
 670:	11 f4       	brne	.+4      	; 0x676 <__fp_round+0x18>
 672:	60 ff       	sbrs	r22, 0
 674:	04 c0       	rjmp	.+8      	; 0x67e <__fp_round+0x20>
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <__fp_split3>:
 680:	57 fd       	sbrc	r21, 7
 682:	90 58       	subi	r25, 0x80	; 128
 684:	44 0f       	add	r20, r20
 686:	55 1f       	adc	r21, r21
 688:	59 f0       	breq	.+22     	; 0x6a0 <__fp_splitA+0x10>
 68a:	5f 3f       	cpi	r21, 0xFF	; 255
 68c:	71 f0       	breq	.+28     	; 0x6aa <__fp_splitA+0x1a>
 68e:	47 95       	ror	r20

00000690 <__fp_splitA>:
 690:	88 0f       	add	r24, r24
 692:	97 fb       	bst	r25, 7
 694:	99 1f       	adc	r25, r25
 696:	61 f0       	breq	.+24     	; 0x6b0 <__fp_splitA+0x20>
 698:	9f 3f       	cpi	r25, 0xFF	; 255
 69a:	79 f0       	breq	.+30     	; 0x6ba <__fp_splitA+0x2a>
 69c:	87 95       	ror	r24
 69e:	08 95       	ret
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	f2 cf       	rjmp	.-28     	; 0x68e <__fp_split3+0xe>
 6aa:	46 95       	lsr	r20
 6ac:	f1 df       	rcall	.-30     	; 0x690 <__fp_splitA>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <__fp_splitA+0x30>
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	f1 cf       	rjmp	.-30     	; 0x69c <__fp_splitA+0xc>
 6ba:	86 95       	lsr	r24
 6bc:	71 05       	cpc	r23, r1
 6be:	61 05       	cpc	r22, r1
 6c0:	08 94       	sec
 6c2:	08 95       	ret

000006c4 <__fp_zero>:
 6c4:	e8 94       	clt

000006c6 <__fp_szero>:
 6c6:	bb 27       	eor	r27, r27
 6c8:	66 27       	eor	r22, r22
 6ca:	77 27       	eor	r23, r23
 6cc:	cb 01       	movw	r24, r22
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__mulsf3>:
 6d2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3x>
 6d6:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_round>
 6da:	0e 94 21 03 	call	0x642	; 0x642 <__fp_pscA>
 6de:	38 f0       	brcs	.+14     	; 0x6ee <__mulsf3+0x1c>
 6e0:	0e 94 28 03 	call	0x650	; 0x650 <__fp_pscB>
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__mulsf3+0x1c>
 6e6:	95 23       	and	r25, r21
 6e8:	11 f0       	breq	.+4      	; 0x6ee <__mulsf3+0x1c>
 6ea:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_inf>
 6ee:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_nan>
 6f2:	11 24       	eor	r1, r1
 6f4:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>

000006f8 <__mulsf3x>:
 6f8:	0e 94 40 03 	call	0x680	; 0x680 <__fp_split3>
 6fc:	70 f3       	brcs	.-36     	; 0x6da <__mulsf3+0x8>

000006fe <__mulsf3_pse>:
 6fe:	95 9f       	mul	r25, r21
 700:	c1 f3       	breq	.-16     	; 0x6f2 <__mulsf3+0x20>
 702:	95 0f       	add	r25, r21
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	55 1f       	adc	r21, r21
 708:	62 9f       	mul	r22, r18
 70a:	f0 01       	movw	r30, r0
 70c:	72 9f       	mul	r23, r18
 70e:	bb 27       	eor	r27, r27
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	63 9f       	mul	r22, r19
 716:	aa 27       	eor	r26, r26
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	aa 1f       	adc	r26, r26
 71e:	64 9f       	mul	r22, r20
 720:	66 27       	eor	r22, r22
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	66 1f       	adc	r22, r22
 728:	82 9f       	mul	r24, r18
 72a:	22 27       	eor	r18, r18
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	73 9f       	mul	r23, r19
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	83 9f       	mul	r24, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	22 1f       	adc	r18, r18
 742:	74 9f       	mul	r23, r20
 744:	33 27       	eor	r19, r19
 746:	a0 0d       	add	r26, r0
 748:	61 1d       	adc	r22, r1
 74a:	23 1f       	adc	r18, r19
 74c:	84 9f       	mul	r24, r20
 74e:	60 0d       	add	r22, r0
 750:	21 1d       	adc	r18, r1
 752:	82 2f       	mov	r24, r18
 754:	76 2f       	mov	r23, r22
 756:	6a 2f       	mov	r22, r26
 758:	11 24       	eor	r1, r1
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	9a f0       	brmi	.+38     	; 0x786 <__mulsf3_pse+0x88>
 760:	f1 f0       	breq	.+60     	; 0x79e <__mulsf3_pse+0xa0>
 762:	88 23       	and	r24, r24
 764:	4a f0       	brmi	.+18     	; 0x778 <__mulsf3_pse+0x7a>
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	bb 1f       	adc	r27, r27
 76c:	66 1f       	adc	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x64>
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	51 05       	cpc	r21, r1
 77c:	80 f0       	brcs	.+32     	; 0x79e <__mulsf3_pse+0xa0>
 77e:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_inf>
 782:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__fp_szero>
 786:	5f 3f       	cpi	r21, 0xFF	; 255
 788:	e4 f3       	brlt	.-8      	; 0x782 <__mulsf3_pse+0x84>
 78a:	98 3e       	cpi	r25, 0xE8	; 232
 78c:	d4 f3       	brlt	.-12     	; 0x782 <__mulsf3_pse+0x84>
 78e:	86 95       	lsr	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b7 95       	ror	r27
 796:	f7 95       	ror	r31
 798:	e7 95       	ror	r30
 79a:	9f 5f       	subi	r25, 0xFF	; 255
 79c:	c1 f7       	brne	.-16     	; 0x78e <__mulsf3_pse+0x90>
 79e:	fe 2b       	or	r31, r30
 7a0:	88 0f       	add	r24, r24
 7a2:	91 1d       	adc	r25, r1
 7a4:	96 95       	lsr	r25
 7a6:	87 95       	ror	r24
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
